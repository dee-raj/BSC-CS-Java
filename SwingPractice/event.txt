LISTENERS
->anything that listens something is called a listener.
->a listener is an interface in java, that listens some 
  event generated by component.

EVENT LISTENERS
->an event listener is a listener that listens an event.

EVENTS
->all the changes that we make when interacting with an application 
  are called events.
  eg:- button clicked, key pressed, mouse pressed etc.

->every component has an state. and if we change the state of a 
  component then it generates an event.

->an event is the change in the state of a component.

EVENT HANDLING
->to handle the events is called event handling.
->and in java we handle the events with the help of event listeners.
  so,to handle an event we need an Event Listener, and handling
  those event is called event handling.


DIFFRENT TYPES OF EVENT LISTENERS
--------X------------X-----------
1.ActionListener      => ActionEvent
->when a button is clicked, press enter in a text field or an item 
  is select from menubar

  <<<how to write an ActionLitener>>>
  1.1> implements 'ActionLitener' interface
  1.2> override 'void actionPerformed()' method
  1.3> for a component addActionListener()

    syntax:
    class Example implements ActionLitener{
        public Example(){
            component.addActionListener(this);
        }
        public void actionPerformed(ActionEvent e){
            //write your code 
        }
    }

..............................................................
2.ItemListener        => ItemEvent
->radiobutton, checkbox, jcombobox
->ItemListener is a listener that listens ItemEvent
->ItemEvent fires on 
  a. any item is selected in a combobox
  b. checkbox is clicked
  c. radiobutton is clicked
  d. choose a JChechBoxMenuItem

  <<how to write item listener>>
  2.1> implements 'ItemListener' interface
  2.2> override 'void itemStateChanged()' method
  2.3> for the component addItemListener()

  syntax:
  class Example implements ItemListener{
    public Example(){
      component.addItemListener(this);
    }
    public void itemStateChanged(ItemEvent ie){
      //write your code
    }
  }

..............................................................
3.KeyListener         => KeyEvent
->when keyboard generates keyEvents
  <<how to write KeyListener>>
  3.1> implements 'KeyListener' interface

  3.2> override 'void keyPressed()' method
  3.3> override 'void keyTyped()' method
  3.4> override 'void keyReleased()' method
  
  3.5> for the component 'addKeyListener()' method

..............................................................
4.MouseListener       => MouseEvent
->putting mouse over a component or cicked by mouse

  <<how to write MouseListener>>
  4.1>implements 'MouseListener' interface

  4.2>override 'void mouseEntered()' method
  4.3>override 'void mouseExited()' method
  4.4>override 'void mousePressed()' method
  4.5>override 'void mouseClicked()' method
  4.5>override 'void mouseReleased()' method
  
  4.6> for the component ' addMouseListener()' method

..............................................................
5.MouseMotionListener => MouseMotionEvent
-> mouse movement/ mouse drag from one position to another

  <<how to write MouseMotionListener>>
  5.1> implements 'MouseMotionListener' interface
  5.2> override 'void mouseMoved()' method
  5.3> override 'void mouseDragged()' method 
  5.4> for the component 'addMouseMotionListener()' 

..............................................................
6.WindowListener      => WindowEvent
->for window activity events handling

  <<how to write WindowListener>>
  6.1> void windowOpened()
  6.2> void windowClosing()
  6.3> void windowClosed()
  6.4> void windowIconified()
  6.5> void windowDeiconified()
  6.6> void windowActivated()
  6.7> void windowDeactivated()

  6.8> addWindowListener()

..............................................................
7.FocusListener       => FocusEvent
->if the focus is gain or loss by the component
  
  <<how to write FocusListener>>
  7.1> FocusListener
  7.2> void focusGained()
  7.3> void focusLost();
  7.4> addFocusListener()

..............................................................
8.CaretListener       => CaretEvent
->the cursor of mouse is caret,so its event handling

  <<how to write FocusListener>>
  8.1>CaretListener
  8.2>void caretUpdated()
  8.3>addCaretListener()
